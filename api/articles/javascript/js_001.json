{"title":"apply()和call()的使用","uid":"1ff54552393e0b2b43253a5d68ca54e8","slug":"javascript/js_001","date":"2023-05-23T02:29:30.251Z","updated":"2023-05-24T03:00:49.758Z","comments":true,"path":"api/articles/javascript/js_001.json","keywords":null,"cover":null,"content":"<h1 id=\"apply-和call\"><a href=\"#apply-和call\" class=\"headerlink\" title=\"apply()和call()\"></a>apply()和call()</h1><h5 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h5><p><code>call</code> 和 <code>apply</code> 都是为了改变某个函数运行时的 context 即上下文而存在的，换句话说，就是为了<strong>改变函数体内部 this 的指向</strong>。</p>\n<h5 id=\"方法定义\"><a href=\"#方法定义\" class=\"headerlink\" title=\"方法定义\"></a>方法定义</h5><p><code>call</code> 和 <code>apply</code>二者的作用完全一样，只是接受参数的方式不太一样。</p>\n<h6 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h6><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;*apply()方法*&#x2F;\nfunction.apply(thisObj[, argArray])\n\n&#x2F;*call()方法*&#x2F;\nfunction.call(thisObj[, arg1[, arg2[, [,...argN]]]]);</code></pre>\n\n<h6 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h6><p><strong>apply</strong>：应用某一对象的一个方法，用另一个对象替换当前对象。例如：<code>B.apply(A, arguments);</code>即A对象应用B对象的方法。</p>\n<p><strong>call</strong>：调用一个对象的一个方法，以另一个对象替换当前对象。例如：<code>B.call(A, args1,args2);</code>即A对象调用B对象的方法。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>PS:A对象将代替B类里的this对象</p></blockquote>\n<h5 id=\"异同之处\"><a href=\"#异同之处\" class=\"headerlink\" title=\"异同之处\"></a>异同之处</h5><h6 id=\"相同\"><a href=\"#相同\" class=\"headerlink\" title=\"相同\"></a>相同</h6><p>都“可以用来代替另一个对象调用一个方法，将一个函数的对象上下文从初始的上下文改变为由thisObj指定的新对象”。</p>\n<h6 id=\"不同\"><a href=\"#不同\" class=\"headerlink\" title=\"不同\"></a>不同</h6><p><strong>apply</strong>：<strong>最多只能有两个参数</strong>——新this对象和一个数组argArray。如果给该方法传递多个参数，则把参数都写进这个数组里面，当然，即使只有一个参数，也要写进数组里。如果argArray不是一个有效的数组或arguments对象，那么将导致一个TypeError。如果没有提供argArray和thisObj任何一个参数，那么Global对象将被用作thisObj，并且无法被传递任何参数。</p>\n<p><strong>call</strong>：它<strong>可以接受多个参数</strong>，第一个参数与apply一样，后面则是一串参数列表。这个方法主要用在js对象各方法相互调用的时候，使当前this实例指针保持一致，或者在特殊情况下需要改变this指针。如果没有提供thisObj参数，那么 Global 对象被用作thisObj。</p>\n<p>实际上，<code>apply</code>和<code>call</code>的功能是一样的，只是传入的参数列表形式不同。</p>\n<h5 id=\"严格模式和非严格模式\"><a href=\"#严格模式和非严格模式\" class=\"headerlink\" title=\"严格模式和非严格模式\"></a>严格模式和非严格模式</h5><h6 id=\"非严格模式\"><a href=\"#非严格模式\" class=\"headerlink\" title=\"非严格模式\"></a>非严格模式</h6><p>在非严格模式下当我们第一个参数传递为<strong>null</strong>或<strong>undefined</strong>时，函数体内的<code>this</code>会指向默认的宿主对象，在浏览器中则是<code>window</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#39;use strict&#39;\nvar test &#x3D; function()&#123;\n    console.log(this&#x3D;&#x3D;&#x3D;window);\n&#125;\ntest.apply(null);&#x2F;&#x2F;true\ntest.call(undefined);&#x2F;&#x2F;true</code></pre>\n\n<h6 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h6><p>在<strong>ECMAScript 5</strong>的<strong>strict</strong>模式下，这种情况下的<strong>this</strong>已经被规定为不会指向全局对象，而是<strong>undefined</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#39;use strict&#39;\nvar test &#x3D; function()&#123;\n    console.log(this&#x3D;&#x3D;&#x3D;window);\n    console.log(this&#x3D;&#x3D;&#x3D;undefined);\n&#125;\ntest.apply(null);\ntest.call(undefined);\n&#x2F;&#x2F;result:false false false true</code></pre>\n\n<h5 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h5><h6 id=\"借用别人的方法\"><a href=\"#借用别人的方法\" class=\"headerlink\" title=\"借用别人的方法\"></a>借用别人的方法</h6><p>此时<strong>foo</strong>中的<strong>logName</strong>方法将被<strong>bar</strong>引用 ，<strong>this</strong>指向了<strong>bar</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#39;use strict&#39;\nvar Animal &#x3D; &#123;\n    name:&quot;goat&quot;,\n    logName:function()&#123;\n      console.log(this.name);\n    &#125;\n&#125;\nvar Sheep &#x3D; &#123;\n    name:&quot;sheep&quot;\n&#125;\nAnimal.logName.apply(Sheep);\nAnimal.logName.call(Sheep);\n&#x2F;&#x2F; result:\n&#x2F;&#x2F; &gt; sheep\n&#x2F;&#x2F; &gt; sheep</code></pre>\n\n<h6 id=\"实现继承\"><a href=\"#实现继承\" class=\"headerlink\" title=\"实现继承\"></a>实现继承</h6><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>单一继承</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#39;use strict&#39;\nfunction Animal(name)&#123;\n    this.name &#x3D; name;\n    this.logName &#x3D; function()&#123;\n      console.log(this.name);\n    &#125;\n&#125;\nfunction Sheep(name)&#123;\n    Animal.call(this,name);\n    &#x2F;&#x2F;apply的用法\n    &#x2F;&#x2F;Animal.apply(this,[name]);\n&#125;\nvar sheep &#x3D; new Sheep(&quot;sheep&quot;);\nsheep.logName();</code></pre></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>多重继承</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#39;use strict&#39;\nfunction Cat()&#123;\n    this.logName &#x3D; function(name)&#123;\n      console.log(name);\n    &#125;\n&#125;;\nfunction Dog()&#123;\n    this.showName &#x3D; function(name)&#123;\n      console.log(name);\n    &#125;\n&#125;;\nfunction Animal()&#123;\n    Cat.call(this);\n    Dog.call(this);\n    &#x2F;&#x2F;Cat.apply(this);\n    &#x2F;&#x2F;Dog.apply(this);\n&#125;;\nvar a &#x3D; new Animal();\na.logName(&quot;Cat&quot;);\na.showName(&quot;Dog&quot;);</code></pre></blockquote>\n<h5 id=\"实际中的问题\"><a href=\"#实际中的问题\" class=\"headerlink\" title=\"实际中的问题\"></a>实际中的问题</h5><p>在实际开发中，经常会遇到this指向被不经意改变的场景。<br>有一个局部的<code>fun</code>方法，<code>fun</code>被作为普通函数调用时，<code>fun</code>内部的this指向了<code>window</code>，但我们往往是想让它指向该<code>#test</code>节点，见如下代码：<br><del>‘use strict’</del></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window.id&#x3D;&quot;window&quot;;\ndocument.querySelector(&#39;#test&#39;).onclick &#x3D; function()&#123;\n  console.log(this.id);&#x2F;&#x2F;test\n  var fun &#x3D; function()&#123;\n    console.log(this.id);\n  &#125;\n  fun();&#x2F;&#x2F;window\n&#125;</code></pre>\n\n<p>在严格模式下，就会出现问题。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>test<br>15:33:34.798 index.js:7 Uncaught TypeError: Cannot read property ‘id’ of undefined at fun (index.js:7) at HTMLButtonElement.document.querySelector.onclick (index.js:9)</p></blockquote>\n<p>使用<strong>call</strong>,<strong>apply</strong>我们就可以轻松的解决这种问题了</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#39;use strict&#39;\nwindow.id&#x3D;&quot;window&quot;;\ndocument.querySelector(&#39;#test&#39;).onclick &#x3D; function()&#123;\n  console.log(this.id);&#x2F;&#x2F;test\n  var fun &#x3D; function()&#123;\n    console.log(this.id);\n  &#125;\n  fun.call(this);&#x2F;&#x2F;test\n  fun.apply(this);&#x2F;&#x2F;test\n&#125;</code></pre>\n\n<p>当然你也可以这样做，不过在<strong>ECMAScript 5</strong>的<strong>strict</strong>模式下，这种情况下的<strong>this</strong>已经被规定为不会指向全局对象，而是<strong>undefined</strong>：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#39;use strict&#39;\nwindow.id&#x3D;&quot;window&quot;;\ndocument.querySelector(&#39;#test&#39;).onclick &#x3D; function()&#123;\n  var that &#x3D; this;\n  console.log(this.id);&#x2F;&#x2F;test\n  var fun &#x3D; function()&#123;\n    console.log(that.id);\n  &#125;\n  fun();&#x2F;&#x2F;test\n&#125;</code></pre>\n\n<h5 id=\"更多巧妙的用法\"><a href=\"#更多巧妙的用法\" class=\"headerlink\" title=\"更多巧妙的用法\"></a>更多巧妙的用法</h5><h6 id=\"数组类\"><a href=\"#数组类\" class=\"headerlink\" title=\"数组类\"></a>数组类</h6><p>通常把具有一下条件的对象称为数组类  </p>\n<ol>\n<li>具有length属性  </li>\n<li>按索引方式存储数据  </li>\n<li>不具有数组的push,pop等方法<br>常见类数组有 <strong>arguments</strong>,<strong>NodeList</strong>!</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">(function()&#123;\n    Array.prototype.push.call(arguments,4);\n    console.log(arguments);&#x2F;&#x2F;[1, 2, 3, 4]\n&#125;)(1,2,3);</code></pre>\n\n<p>这样就往<strong>arguments</strong>中push一个4进去了</p>\n<p>同样push方法没有提供push一个数组,但是它提供了<code>push(param1,param,…paramN)</code> 所以同样也可以通过<strong>apply</strong>来装换一下这个数组,即:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var arr1&#x3D;new Array(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;); \nvar arr2&#x3D;new Array(&quot;4&quot;,&quot;5&quot;,&quot;6&quot;); \nArray.prototype.push.apply(arr1,arr2); \nconsole.log(arr1);&#x2F;&#x2F;[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;]</code></pre>\n\n<h6 id=\"求数组中的最大-小-值\"><a href=\"#求数组中的最大-小-值\" class=\"headerlink\" title=\"求数组中的最大(小)值\"></a>求数组中的最大(小)值</h6><p>因为<code>Math.max</code>不支持<code>Math.max([param1,param2])</code>也就是数组，但是它支持<code>Math.max(param1,param2...)</code>，所以可以根据<strong>apply</strong>的特点来解决 <code>var max=Math.max.apply(null,array)</code>，这样就轻易的可以得到一个数组中的最大项（apply会将一个数组转换为一个参数接一个参数的方式传递给方法）</p>\n<p>这块在调用的时候第一个参数给了<strong>null</strong>，这是因为没有对象去调用这个方法，我只需要用这个方法帮我运算，得到返回的结果就行，所以直接传递了一个<strong>null</strong>过去。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var arr &#x3D; [2,3,54,32,6,99,34];\nvar  maxVal &#x3D; Math.max.apply(null,arr);\nconsole.log(maxVal);&#x2F;&#x2F;99</code></pre>\n\n<h6 id=\"判断类型\"><a href=\"#判断类型\" class=\"headerlink\" title=\"判断类型\"></a>判断类型</h6><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(Object.prototype.toString.call(123)) &#x2F;&#x2F;[object Number]\nconsole.log(Object.prototype.toString.call(&#39;123&#39;)) &#x2F;&#x2F;[object String]\nconsole.log(Object.prototype.toString.call(undefined)) &#x2F;&#x2F;[object Undefined]\nconsole.log(Object.prototype.toString.call(true)) &#x2F;&#x2F;[object Boolean]\nconsole.log(Object.prototype.toString.call(&#123;&#125;)) &#x2F;&#x2F;[object Object]\nconsole.log(Object.prototype.toString.call([])) &#x2F;&#x2F;[object Array]\nconsole.log(Object.prototype.toString.call(function()&#123;&#125;)) &#x2F;&#x2F;[object Function]</code></pre>\n\n\n","text":"apply()和call()作用call 和 apply 都是为了改变某个函数运行时的 context 即上下文而存在的，换句话说，就是为了改变函数体内部 this 的指向。 方法定义call 和 apply二者的作用完全一样，只是接受参数的方式不太一样。 方法&#x2F;*ap...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"Javascript","slug":"Javascript","count":3,"path":"api/categories/Javascript.json"}],"tags":[{"name":"Javascript","slug":"Javascript","count":3,"path":"api/tags/Javascript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#apply-%E5%92%8Ccall\"><span class=\"toc-text\">apply()和call()</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">作用</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">方法定义</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">方法</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">定义</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BC%82%E5%90%8C%E4%B9%8B%E5%A4%84\"><span class=\"toc-text\">异同之处</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E5%90%8C\"><span class=\"toc-text\">相同</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E5%90%8C\"><span class=\"toc-text\">不同</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F%E5%92%8C%E9%9D%9E%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">严格模式和非严格模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">非严格模式</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">严格模式</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">用法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%80%9F%E7%94%A8%E5%88%AB%E4%BA%BA%E7%9A%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">借用别人的方法</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">实现继承</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E9%99%85%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">实际中的问题</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E5%A4%9A%E5%B7%A7%E5%A6%99%E7%9A%84%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">更多巧妙的用法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E7%B1%BB\"><span class=\"toc-text\">数组类</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E6%B1%82%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7-%E5%B0%8F-%E5%80%BC\"><span class=\"toc-text\">求数组中的最大(小)值</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%88%A4%E6%96%AD%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">判断类型</span></a></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"Lim Forson","slug":"lim-forson","avatar":"/images/avatar/avatar.png","link":"/","description":"Stay hungry, Stay foolish.","socials":{"github":"https://github.com/linfushan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2151406113","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JQuery 插件封装","uid":"58f8583587853300427967dcc2c71efb","slug":"jquery/jq_001","date":"2023-05-23T02:35:56.520Z","updated":"2023-06-18T12:56:10.120Z","comments":true,"path":"api/articles/jquery/jq_001.json","keywords":null,"cover":"../../images/jquery/jquery.jpg","text":" jQuery 的开发方式 通过$.extend()来扩展jQuery 通过$.fn向jQuery添加新方法 通过$.widget()应用jQuery UI的部件工厂方式创建 写在哪里写插件一般都是单独的一个文件出来，然后可重复的供他人调用。由于插件依赖的是jQuery，所以在写...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[{"name":"JQuery","slug":"JQuery","count":1,"path":"api/categories/JQuery.json"}],"tags":[{"name":"JQuery","slug":"JQuery","count":1,"path":"api/tags/JQuery.json"}],"author":{"name":"Lim Forson","slug":"lim-forson","avatar":"/images/avatar/avatar.png","link":"/","description":"Stay hungry, Stay foolish.","socials":{"github":"https://github.com/linfushan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2151406113","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"CSS RESET","uid":"5b87b1e754ccdf31f0f89626f68fdd11","slug":"css/css_001","date":"2023-05-22T12:29:21.397Z","updated":"2023-06-18T13:08:49.523Z","comments":true,"path":"api/articles/css/css_001.json","keywords":null,"cover":"../../images/css/cover_css_reset.jpg","text":"cssreset 有margin值的元素有： body h1 h2 h3 h4 h5 h6 p blockquote pre hr figure dl dd ul ol fieldset menu 有padding值的元素有: ul ol button th td fieldse...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"CSS","slug":"CSS","count":2,"path":"api/categories/CSS.json"}],"tags":[{"name":"CSS","slug":"CSS","count":2,"path":"api/tags/CSS.json"}],"author":{"name":"Lim Forson","slug":"lim-forson","avatar":"/images/avatar/avatar.png","link":"/","description":"Stay hungry, Stay foolish.","socials":{"github":"https://github.com/linfushan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2151406113","zhihu":"","csdn":"","juejin":"","customs":{}}}}}