{"title":"你会用ES6，那你到是用啊！","uid":"d4026f51002d22aa52a2d58bbc35f9b0","slug":"es6/es6_001","date":"2023-05-26T02:06:09.343Z","updated":"2023-06-18T13:16:20.149Z","comments":true,"path":"api/articles/es6/es6_001.json","keywords":null,"cover":"../../images/es6/es6.jpg","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>之前在 <strong>稀土掘金</strong> 看到过这样一篇文章 <a href=\"https://juejin.cn/post/7016520448204603423\">你会用ES6，那你倒是用啊！</a>，觉得作者的写作方法很是幽默，让人看起来不会很是乏味，里面讲解的知识也很是通俗易懂，容易吸收。我这里就直接简单的将作者的原文做一次引用，如果涉及侵权需要删除，可单独联系！</p></blockquote>\n<hr>\n<p>不是标题党，这是一位leader在一次代码评审会对小组成员发出的“怒吼”，原因是在代码评审中发现很多地方还是采用ES5的写法，也不是说用ES5写法不行，会有BUG，只是造成代码量增多，可读性变差而已。</p>\n<p>恰好，这位leader有代码洁癖，面对3~5年经验的成员，还写这种水平的代码，极为不满，不断对代码进行吐槽。不过对于他的吐槽，我感觉还是有很大收获的，故就把leader的吐槽记录下来，分享给掘友们，觉得有收获点个赞，有错误的或者更好的写法，非常欢迎在评论中留言。</p>\n<p><strong>ps：ES5之后的JS语法统称ES6！！！</strong></p>\n<h1 id=\"一、关于取值的吐槽\"><a href=\"#一、关于取值的吐槽\" class=\"headerlink\" title=\"一、关于取值的吐槽\"></a>一、关于取值的吐槽</h1><p>取值在程序中非常常见，比如从对象<strong>obj</strong>中取值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj &#x3D; &#123;\n    a:1,\n    b:2,\n    c:3,\n    d:4,\n    e:5,\n&#125;</code></pre>\n<p>吐槽:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const a &#x3D; obj.a;\nconst b &#x3D; obj.b;\nconst c &#x3D; obj.c;\nconst d &#x3D; obj.d;\nconst e &#x3D; obj.e;</code></pre>\n<p>或者</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const f &#x3D; obj.a + obj.d;\nconst g &#x3D; obj.c + obj.e;</code></pre>\n<p>吐槽：“不会用ES6的解构赋值来取值吗？5行代码用1行代码搞定不香吗？直接用对象名加属性名去取值，要是对象名短还好，很长呢？搞得代码中到处都是这个对象名。”</p>\n<p>改进：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const &#123;a,b,c,d,e&#125; &#x3D; obj;\nconst f &#x3D; a + d;\nconst g &#x3D; c + e;</code></pre>\n<p>反驳</p>\n<p>不是不用ES6的解构赋值，而是服务端返回的数据对象中的属性名不是我想要的，这样取值，不是还得重新创建个遍历赋值。</p>\n<p>吐槽</p>\n<p>看来你对ES6的解构赋值掌握的还是不够彻底。如果想创建的变量名和对象的属性名不一致，可以这么写：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const &#123;a:a1&#125; &#x3D; obj;\nconsole.log(a1); &#x2F;&#x2F; 1</code></pre>\n\n<p>补充</p>\n<p>ES6的解构赋值虽然好用。但是要注意解构的对象不能为<code>undefined</code>、<code>null</code>。否则会报错，故要给被解构的对象一个默认值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const &#123;a,b,c,d,e&#125; &#x3D; obj || &#123;&#125;;</code></pre>\n\n<h1 id=\"二、关于合并数据的吐槽\"><a href=\"#二、关于合并数据的吐槽\" class=\"headerlink\" title=\"二、关于合并数据的吐槽\"></a>二、关于合并数据的吐槽</h1><p>比如合并两个数组，合并两个对象。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const a &#x3D; [1,2,3];\nconst b &#x3D; [1,5,6];\nconst c &#x3D; a.concat(b);&#x2F;&#x2F;[1,2,3,1,5,6]\n\nconst obj1 &#x3D; &#123;\n  a:1,\n&#125;\nconst obj2 &#x3D; &#123;\n  b:1,\n&#125;\nconst obj &#x3D; Object.assign(&#123;&#125;, obj1, obj2);&#x2F;&#x2F;&#123;a:1,b:1&#125;</code></pre>\n<p>吐槽</p>\n<p>ES6的扩展运算符是不是忘记了，还有数组的合并不考虑去重吗？</p>\n<p>改进</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const a &#x3D; [1,2,3];\nconst b &#x3D; [1,5,6];\nconst c &#x3D; [...new Set([...a,...b])];&#x2F;&#x2F;[1,2,3,5,6]\n\nconst obj1 &#x3D; &#123;\n  a:1,\n&#125;\nconst obj2 &#x3D; &#123;\n  b:1,\n&#125;\nconst obj &#x3D; &#123;...obj1,...obj2&#125;;&#x2F;&#x2F;&#123;a:1,b:1&#125;</code></pre>\n\n<h1 id=\"三、关于拼接字符串的吐槽\"><a href=\"#三、关于拼接字符串的吐槽\" class=\"headerlink\" title=\"三、关于拼接字符串的吐槽\"></a>三、关于拼接字符串的吐槽</h1><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const name &#x3D; &#39;小明&#39;;\nconst score &#x3D; 59;\nlet result &#x3D; &#39;&#39;;\nif(score &gt; 60)&#123;\n  result &#x3D; &#96;$&#123;name&#125;的考试成绩及格&#96;; \n&#125;else&#123;\n  result &#x3D; &#96;$&#123;name&#125;的考试成绩不及格&#96;; \n&#125;</code></pre>\n\n<p>吐槽</p>\n<p>像你们这样用ES6字符串模板，还不如不用，你们根本不清楚在<code>$&#123;&#125;</code>中可以做什么操作。在${}中可以放入任意的<code>JavaScript</code>表达式，可以进行运算，以及引用对象属性。</p>\n<p>改进</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const name &#x3D; &#39;小明&#39;;\nconst score &#x3D; 59;\nconst result &#x3D; &#96;$&#123;name&#125;$&#123;score &gt; 60?&#39;的考试成绩及格&#39;:&#39;的考试成绩不及格&#39;&#125;&#96;;</code></pre>\n\n<h1 id=\"四、关于if中判断条件的吐槽\"><a href=\"#四、关于if中判断条件的吐槽\" class=\"headerlink\" title=\"四、关于if中判断条件的吐槽\"></a>四、关于if中判断条件的吐槽</h1><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">if(\n    type &#x3D;&#x3D; 1 ||\n    type &#x3D;&#x3D; 2 ||\n    type &#x3D;&#x3D; 3 ||\n    type &#x3D;&#x3D; 4 ||\n)&#123;\n   &#x2F;&#x2F;...\n&#125;</code></pre>\n\n<p>吐槽</p>\n<p>ES6中数组实例方法<code>includes</code>会不会使用呢？</p>\n<p>改进</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const condition &#x3D; [1,2,3,4];\n\nif( condition.includes(type) )&#123;\n   &#x2F;&#x2F;...\n&#125;</code></pre>\n\n<h1 id=\"五、关于列表搜索的吐槽\"><a href=\"#五、关于列表搜索的吐槽\" class=\"headerlink\" title=\"五、关于列表搜索的吐槽\"></a>五、关于列表搜索的吐槽</h1><p>在项目中，一些没分页的列表的搜索功能由前端来实现，搜索一般分为精确搜索和模糊搜索。搜索也要叫过滤，一般用<code>filter</code>来实现。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const a &#x3D; [1,2,3,4,5];\nconst result &#x3D; a.filter( \n  item &#x3D;&gt;&#123;\n    return item &#x3D;&#x3D;&#x3D; 3\n  &#125;\n)</code></pre>\n\n<p>吐槽</p>\n<p>如果是精确搜索不会用<code>ES6</code>中的<code>find</code>吗？性能优化懂么，<code>find</code>方法中找到符合条件的项，就不会继续遍历数组</p>\n<p>改进</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const a &#x3D; [1,2,3,4,5];\nconst result &#x3D; a.find( \n  item &#x3D;&gt;&#123;\n    return item &#x3D;&#x3D;&#x3D; 3\n  &#125;\n)</code></pre>\n\n<h1 id=\"六、关于扁平化数组的吐槽\"><a href=\"#六、关于扁平化数组的吐槽\" class=\"headerlink\" title=\"六、关于扁平化数组的吐槽\"></a>六、关于扁平化数组的吐槽</h1><p>一个部门JSON数据中，属性名是部门id，属性值是个部门成员id数组集合，现在要把有部门的成员id都提取到一个数组集合中。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const deps &#x3D; &#123;\n&#39;采购部&#39;:[1,2,3],\n&#39;人事部&#39;:[5,8,12],\n&#39;行政部&#39;:[5,14,79],\n&#39;运输部&#39;:[3,64,105],\n&#125;\nlet member &#x3D; [];\nfor (let item in deps)&#123;\n    const value &#x3D; deps[item];\n    if(Array.isArray(value))&#123;\n        member &#x3D; [...member,...value]\n    &#125;\n&#125;\nmember &#x3D; [...new Set(member)]</code></pre>\n<p>吐槽</p>\n<p>获取对象的全部属性值还要遍历吗？<code>Object.values</code>忘记了吗？还有涉及到数组的扁平化处理，为啥不用ES6提供的<code>flat</code>方法呢，还好这次的数组的深度最多只到2维，还要是遇到4维、5维深度的数组，是不是得循环嵌套循环来扁平化？</p>\n<p>改进</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const deps &#x3D; &#123;\n    &#39;采购部&#39;:[1,2,3],\n    &#39;人事部&#39;:[5,8,12],\n    &#39;行政部&#39;:[5,14,79],\n    &#39;运输部&#39;:[3,64,105],\n&#125;\nlet member &#x3D; Object.values(deps).flat(Infinity);\n</code></pre>\n<p>其中使用<code>Infinity</code>作为<code>flat</code>的参数，使得无需知道被扁平化的数组的维度。</p>\n<p>补充: <code>flat</code>方法不支持IE浏览器。</p>\n<h1 id=\"七、关于获取对象属性值的吐槽\"><a href=\"#七、关于获取对象属性值的吐槽\" class=\"headerlink\" title=\"七、关于获取对象属性值的吐槽\"></a>七、关于获取对象属性值的吐槽</h1><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const name &#x3D; obj &amp;&amp; obj.name;</code></pre>\n<p>吐槽</p>\n<p>ES6中的可选链操作符会使用么？</p>\n<p>改进</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const name &#x3D; obj?.name;</code></pre>\n\n<h1 id=\"八、关于添加对象属性的吐槽\"><a href=\"#八、关于添加对象属性的吐槽\" class=\"headerlink\" title=\"八、关于添加对象属性的吐槽\"></a>八、关于添加对象属性的吐槽</h1><p>当给对象添加属性时，如果属性名是动态变化的，该怎么处理。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let obj &#x3D; &#123;&#125;;\nlet index &#x3D; 1;\nlet key &#x3D; &#96;topic$&#123;index&#125;&#96;;\nobj[key] &#x3D; &#39;话题内容&#39;;</code></pre>\n\n<p>吐槽</p>\n<p>为何要额外创建一个变量。不知道ES6中的对象属性名是可以用表达式吗？</p>\n<p>改进</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let obj &#x3D; &#123;&#125;;\nlet index &#x3D; 1;\nobj[&#96;topic$&#123;index&#125;&#96;] &#x3D; &#39;话题内容&#39;;</code></pre>\n\n<h1 id=\"九、关于输入框非空的判断\"><a href=\"#九、关于输入框非空的判断\" class=\"headerlink\" title=\"九、关于输入框非空的判断\"></a>九、关于输入框非空的判断</h1><p>在处理输入框相关业务时，往往会判断输入框未输入值的场景。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">if(value !&#x3D;&#x3D; null &amp;&amp; value !&#x3D;&#x3D; undefined &amp;&amp; value !&#x3D;&#x3D; &#39;&#39;)&#123;\n    &#x2F;&#x2F;...\n&#125;</code></pre>\n\n<p>吐槽</p>\n<p>ES6中新出的空值合并运算符了解过吗，要写那么多条件吗？</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">if((value??&#39;&#39;) !&#x3D;&#x3D; &#39;&#39;)&#123;\n  &#x2F;&#x2F;...\n&#125;</code></pre>\n\n<h1 id=\"十、关于异步函数的吐槽\"><a href=\"#十、关于异步函数的吐槽\" class=\"headerlink\" title=\"十、关于异步函数的吐槽\"></a>十、关于异步函数的吐槽</h1><p>异步函数很常见，经常是用 Promise 来实现。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const fn1 &#x3D; () &#x3D;&gt;&#123;\n  return new Promise((resolve, reject) &#x3D;&gt; &#123;\n    setTimeout(() &#x3D;&gt; &#123;\n      resolve(1);\n    &#125;, 300);\n  &#125;);\n&#125;\nconst fn2 &#x3D; () &#x3D;&gt;&#123;\n  return new Promise((resolve, reject) &#x3D;&gt; &#123;\n    setTimeout(() &#x3D;&gt; &#123;\n      resolve(2);\n    &#125;, 600);\n  &#125;);\n&#125;\nconst fn &#x3D; () &#x3D;&gt;&#123;\n   fn1().then(res1 &#x3D;&gt;&#123;\n      console.log(res1);&#x2F;&#x2F; 1\n      fn2().then(res2 &#x3D;&gt;&#123;\n        console.log(res2)\n      &#125;)\n   &#125;)\n&#125;</code></pre>\n\n<p>吐槽</p>\n<p>如果这样调用异步函数，不怕形成地狱回调啊！</p>\n<p>改进</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const fn &#x3D; async () &#x3D;&gt;&#123;\n  const res1 &#x3D; await fn1();\n  const res2 &#x3D; await fn2();\n  console.log(res1);&#x2F;&#x2F; 1\n  console.log(res2);&#x2F;&#x2F; 2\n&#125;</code></pre>\n<p>补充</p>\n<p>但是要做并发请求时，还是要用到<code>Promise.all()</code>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const fn &#x3D; () &#x3D;&gt;&#123;\n   Promise.all([fn1(),fn2()]).then(res &#x3D;&gt;&#123;\n       console.log(res);&#x2F;&#x2F; [1,2]\n   &#125;) \n&#125;</code></pre>\n\n<p>如果并发请求时，只要其中一个异步函数处理完成，就返回结果，要用到<code>Promise.race()</code>。</p>\n","text":" 之前在 稀土掘金 看到过这样一篇文章 你会用ES6，那你倒是用啊！，觉得作者的写作方法很是幽默，让人看起来不会很是乏味，里面讲解的知识也很是通俗易懂，容易吸收。我这里就直接简单的将作者的原文做一次引用，如果涉及侵权需要删除，可单独联系！ 不是标题党，这是一位leader在一次代...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"ES6","slug":"ES6","count":1,"path":"api/categories/ES6.json"}],"tags":[{"name":"ES6","slug":"ES6","count":1,"path":"api/tags/ES6.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%85%B3%E4%BA%8E%E5%8F%96%E5%80%BC%E7%9A%84%E5%90%90%E6%A7%BD\"><span class=\"toc-text\">一、关于取值的吐槽</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%85%B3%E4%BA%8E%E5%90%88%E5%B9%B6%E6%95%B0%E6%8D%AE%E7%9A%84%E5%90%90%E6%A7%BD\"><span class=\"toc-text\">二、关于合并数据的吐槽</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%85%B3%E4%BA%8E%E6%8B%BC%E6%8E%A5%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%90%90%E6%A7%BD\"><span class=\"toc-text\">三、关于拼接字符串的吐槽</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E5%85%B3%E4%BA%8Eif%E4%B8%AD%E5%88%A4%E6%96%AD%E6%9D%A1%E4%BB%B6%E7%9A%84%E5%90%90%E6%A7%BD\"><span class=\"toc-text\">四、关于if中判断条件的吐槽</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E5%85%B3%E4%BA%8E%E5%88%97%E8%A1%A8%E6%90%9C%E7%B4%A2%E7%9A%84%E5%90%90%E6%A7%BD\"><span class=\"toc-text\">五、关于列表搜索的吐槽</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81%E5%85%B3%E4%BA%8E%E6%89%81%E5%B9%B3%E5%8C%96%E6%95%B0%E7%BB%84%E7%9A%84%E5%90%90%E6%A7%BD\"><span class=\"toc-text\">六、关于扁平化数组的吐槽</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%83%E3%80%81%E5%85%B3%E4%BA%8E%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E5%80%BC%E7%9A%84%E5%90%90%E6%A7%BD\"><span class=\"toc-text\">七、关于获取对象属性值的吐槽</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%AB%E3%80%81%E5%85%B3%E4%BA%8E%E6%B7%BB%E5%8A%A0%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E7%9A%84%E5%90%90%E6%A7%BD\"><span class=\"toc-text\">八、关于添加对象属性的吐槽</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B9%9D%E3%80%81%E5%85%B3%E4%BA%8E%E8%BE%93%E5%85%A5%E6%A1%86%E9%9D%9E%E7%A9%BA%E7%9A%84%E5%88%A4%E6%96%AD\"><span class=\"toc-text\">九、关于输入框非空的判断</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8D%81%E3%80%81%E5%85%B3%E4%BA%8E%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0%E7%9A%84%E5%90%90%E6%A7%BD\"><span class=\"toc-text\">十、关于异步函数的吐槽</span></a></li></ol>","author":{"name":"Lim Forson","slug":"lim-forson","avatar":"/images/avatar/avatar.png","link":"/","description":"Stay hungry, Stay foolish.","socials":{"github":"https://github.com/linfushan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2151406113","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"CSS hack","uid":"58de8212a988128478edd77479cf970b","slug":"css/css_002","date":"2023-05-26T06:48:44.939Z","updated":"2023-06-18T13:11:03.708Z","comments":true,"path":"api/articles/css/css_002.json","keywords":null,"cover":"../../images/css/css_hack.jpg","text":"css hack兼容范围：IE:6.0+，FireFox:2.0+，Opera 10.0+，Sarari 3.0+，Chrome 各浏览器hack兼容一览表 标记 IE6 IE7 IE8 FF Opera Sarari [*+&gt;&lt;] ✔ ✔ ✘ ✘ ✘ ✘ _ ✔ ✘...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"CSS","slug":"CSS","count":2,"path":"api/categories/CSS.json"}],"tags":[{"name":"CSS","slug":"CSS","count":2,"path":"api/tags/CSS.json"},{"name":"CSS HACK","slug":"CSS-HACK","count":1,"path":"api/tags/CSS-HACK.json"}],"author":{"name":"Lim Forson","slug":"lim-forson","avatar":"/images/avatar/avatar.png","link":"/","description":"Stay hungry, Stay foolish.","socials":{"github":"https://github.com/linfushan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2151406113","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"H5中简单的PDF文件预览","uid":"b2cc4378449d336ad426ce0756b96b31","slug":"plugins/plugin_001","date":"2023-05-24T02:54:44.539Z","updated":"2023-06-18T13:20:45.966Z","comments":true,"path":"api/articles/plugins/plugin_001.json","keywords":null,"cover":"../../images/plugins/pdf5.jpg","text":" 在web页面中预览pdf文件的方式有多种，有的是直接打开，有的是借助不同的封装插件进行预览，这里介绍一个极其简单的预览插件。 使用到的插件 pdfh5 axios 安装npm i pdfh5 --save 导入插件import Pdfh5 from &#39;pdfh5&#39...","link":"","photos":[],"count_time":{"symbolsCount":518,"symbolsTime":"1 mins."},"categories":[{"name":"Plugins","slug":"Plugins","count":1,"path":"api/categories/Plugins.json"}],"tags":[{"name":"pdfh5","slug":"pdfh5","count":1,"path":"api/tags/pdfh5.json"}],"author":{"name":"Lim Forson","slug":"lim-forson","avatar":"/images/avatar/avatar.png","link":"/","description":"Stay hungry, Stay foolish.","socials":{"github":"https://github.com/linfushan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2151406113","zhihu":"","csdn":"","juejin":"","customs":{}}}}}